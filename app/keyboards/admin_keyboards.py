from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.callbacks import AdminCallback, ProfileCallback

def get_admin_user_management_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="üë• –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö", callback_data=AdminCallback(action="active_users"))
    builder.button(text="üë• –°–ø–∏—Å–æ–∫ —É–≤–æ–ª–µ–Ω–Ω—ã—Ö", callback_data=AdminCallback(action="inactive_users"))
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=ProfileCallback(action="back"))
    builder.adjust(1)
    return builder.as_markup()

def get_user_list_markup(users: list, show_active: bool = True, page: int = 0, per_page: int = 10):
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–º—è –∏–ª–∏ username)
    for user in users[page * per_page: (page + 1) * per_page]:
        builder.button(
            text=f"{user.name or user.username or f'ID {user.telegram_id}'}",
            callback_data=AdminCallback(action="user_info", user_id=user.telegram_id)
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if page > 0:
        pagination_buttons.append(
            ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", AdminCallback(action="prev_page", page=page-1, show_active=show_active))
        )
    
    if (page + 1) * per_page < len(users):
        pagination_buttons.append(
            ("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", AdminCallback(action="next_page", page=page+1, show_active=show_active))
        )
    
    for text, callback_data in pagination_buttons:
        builder.button(text=text, callback_data=callback_data)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=AdminCallback(action="user_list"))
    
    # –†–µ–≥—É–ª–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ç–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—è –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –∑–∞—Ç–µ–º –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.adjust(1, len(pagination_buttons), 1)
    
    return builder.as_markup()

def get_admin_user_actions_menu(user_id: int, is_active: bool):
    builder = InlineKeyboardBuilder()
    
    builder.button(
        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", 
        callback_data=AdminCallback(action="edit_user_info", user_id=user_id)
    )
    builder.button(
        text="üîë –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", 
        callback_data=AdminCallback(action="edit_role", user_id=user_id)
    )
    builder.button(
        text="üíµ –ò–∑–º–µ–Ω–∏—Ç—å T-Point", 
        callback_data=AdminCallback(action="edit_t_points", user_id=user_id)
    )
    
    if is_active:
        builder.button(
            text="üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", 
            callback_data=AdminCallback(action="deactivate", user_id=user_id)
        )
    else:
        builder.button(
            text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", 
            callback_data=AdminCallback(action="activate", user_id=user_id)
        )
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=AdminCallback(action="user_list"))
    builder.adjust(1)
    return builder.as_markup()

def get_admin_edit_fields_menu(user_id: int):
    builder = InlineKeyboardBuilder()
    builder.button(text="üë§ –ò–º—è", callback_data=AdminCallback(action="edit_name", user_id=user_id))
    builder.button(text="üëî –î–æ–ª–∂–Ω–æ—Å—Ç—å", callback_data=AdminCallback(action="edit_position", user_id=user_id))
    builder.button(text="üè¢ –û—Ç–¥–µ–ª", callback_data=AdminCallback(action="edit_department", user_id=user_id))
    builder.button(text="üìÖ –î–∞—Ç–∞ –Ω–∞–π–º–∞", callback_data=AdminCallback(action="edit_hire_date", user_id=user_id))
    builder.button(text="üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data=AdminCallback(action="edit_birth_date", user_id=user_id))
    builder.button(text="üîë –†–æ–ª—å", callback_data=AdminCallback(action="edit_role", user_id=user_id))
    builder.button(text="üíµ T-Point", callback_data=AdminCallback(action="edit_tpoint", user_id=user_id))
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=AdminCallback(action="user_info", user_id=user_id))
    builder.adjust(2)
    return builder.as_markup()
